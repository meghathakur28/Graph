import java.util.*;
public class BFS {
    static class Edges{
        int src;
        int des;
        Edges(int s,int d)
        {
            this.src=s;
            this.des=d;
        }
    }
    public static void create(ArrayList<Edges> graph[])
    {
        for(int i=0;i<graph.length;i++)
        {
            graph[i]=new ArrayList<>();
        }
        graph[0].add(new Edges(0,1));
        graph[0].add(new Edges(0,2));

        graph[1].add(new Edges(1,0));
        graph[1].add(new Edges(1,3));

        graph[2].add(new Edges(2,0));
        graph[2].add(new Edges(2,4));

        graph[3].add(new Edges(3,1));
        graph[3].add(new Edges(3,4));
        graph[3].add(new Edges(3,5));

        graph[4].add(new Edges(4,2));
        graph[4].add(new Edges(4,5));
        graph[4].add(new Edges(4,3));

        graph[5].add(new Edges(5,3));
        graph[5].add(new Edges(5,4));
        graph[5].add(new Edges(5,6));

        graph[6].add(new Edges(6,5));
    }
    public static void DFS(ArrayList<Edges> graph[],int curr,boolean[] arr)
    {
        System.out.print(curr+" ");
        arr[curr]=true;
        for(int i=0;i<graph[curr].size();i++)
        {
            Edges e = graph[curr].get(i);
            if(arr[e.des]==false)
            {
                DFS(graph,e.des,arr);
            }
        }
    }
    public static void main(String[] args)
    {
        int V= 7;
        ArrayList<Edges> graph[] = new ArrayList[V];
        create(graph);
        boolean[] arr = new boolean[V];
        DFS(graph,0,arr);

    }
    
}
